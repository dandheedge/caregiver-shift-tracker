package main

import (
	"os"

	"visit-tracker-api/database"
	"visit-tracker-api/handlers"
	"visit-tracker-api/middleware"
	"visit-tracker-api/utils"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	docs "visit-tracker-api/docs" // docs is generated by Swag CLI, you have to import it.
)

// @title Visit Tracker API
// @version 1.0
// @description RESTful API for caregiver visit tracking and Electronic Visit Verification (EVV) compliance
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host localhost:8080
// @BasePath /api/v1

// @externalDocs.description OpenAPI
// @externalDocs.url https://swagger.io/resources/open-api/
func main() {
	// Initialize logger
	logger := utils.InitLogger()
	logger.Info("Starting Visit Tracker API")

	// Initialize database
	database.Initialize()
	defer database.Close()

	// Configure Swagger info
	docs.SwaggerInfo.Title = "Visit Tracker API"
	docs.SwaggerInfo.Description = "RESTful API for caregiver visit tracking and Electronic Visit Verification (EVV) compliance"
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = "localhost:8080"
	docs.SwaggerInfo.BasePath = "/api/v1"
	docs.SwaggerInfo.Schemes = []string{"http"}

	// Set Gin mode
	if os.Getenv("GIN_MODE") == "" {
		gin.SetMode(gin.DebugMode)
	}

	// Create Gin router with no default middleware
	router := gin.New()

	// Add custom middleware
	router.Use(middleware.RequestIDMiddleware())
	router.Use(middleware.LoggingMiddleware(logger))
	router.Use(middleware.ErrorHandlerMiddleware(logger))
	router.Use(gin.Recovery()) // Keep gin's recovery as backup

	// Configure CORS
	config := cors.DefaultConfig()
	config.AllowOrigins = []string{"*"} // In production, specify actual origins
	config.AllowMethods = []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"}
	config.AllowHeaders = []string{"Origin", "Content-Type", "Accept", "Authorization", "X-Request-ID"}
	router.Use(cors.New(config))

	// Health check endpoint (supports both GET and HEAD methods)
	healthHandler := func(c *gin.Context) {
		utils.JSONSuccess(c, gin.H{
			"status":  "healthy",
			"service": "visit-tracker-api",
			"version": "1.0.0",
		})
	}
	router.GET("/health", healthHandler)
	router.HEAD("/health", healthHandler)

	// Swagger documentation
	// Redirect root swagger path to index for better UX  
	router.GET("/swagger", func(c *gin.Context) {
		c.Redirect(301, "/swagger/index.html")
	})
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// API routes
	api := router.Group("/api/v1")
	{
		// Schedule endpoints
		api.GET("/schedules", handlers.GetAllSchedules)
		api.GET("/schedules/today", handlers.GetTodaySchedules)
		api.GET("/schedules/:id", handlers.GetScheduleByID)
		api.GET("/schedules/:id/tasks", handlers.GetTasksBySchedule)
		
		// Visit endpoints
		api.POST("/schedules/:id/start", handlers.StartVisit)
		api.POST("/schedules/:id/end", handlers.EndVisit)
		
		// Task endpoints
		api.POST("/tasks/:taskId/update", handlers.UpdateTask)
		
		// Activity endpoints
		api.GET("/activities/:id", handlers.GetActivityByID)
		api.GET("/schedules/:id/activities", handlers.GetActivitiesBySchedule)
		api.POST("/schedules/:id/activities", handlers.CreateActivity)
		api.PUT("/activities/:id", handlers.UpdateActivity)
		
		// Stats endpoint
		api.GET("/stats", handlers.GetStats)
	}

	// Get port from environment or default to 8080
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	logger.WithField("port", port).Info("Server starting")
	logger.WithField("health_check", "http://localhost:"+port+"/health").Info("Health check endpoint")
	logger.WithField("swagger", "http://localhost:"+port+"/swagger/").Info("Swagger documentation")
	logger.Info("API endpoints:")
	logger.Info("  GET    /api/v1/schedules           - Get all schedules")
	logger.Info("  GET    /api/v1/schedules/today     - Get today's schedules")
	logger.Info("  GET    /api/v1/schedules/:id       - Get schedule details with tasks")
	logger.Info("  GET    /api/v1/schedules/:id/tasks - Get tasks for a schedule")
	logger.Info("  POST   /api/v1/schedules/:id/start - Start visit (requires lat/lng)")
	logger.Info("  POST   /api/v1/schedules/:id/end   - End visit (requires lat/lng)")
	logger.Info("  POST   /api/v1/tasks/:taskId/update - Update task status")
	logger.Info("  GET    /api/v1/activities/:id      - Get activity by ID")
	logger.Info("  GET    /api/v1/schedules/:id/activities - Get activities for a schedule")
	logger.Info("  POST   /api/v1/schedules/:id/activities - Create new activity")
	logger.Info("  PUT    /api/v1/activities/:id      - Update activity progress")
	logger.Info("  GET    /api/v1/stats               - Get dashboard statistics")

	if err := router.Run(":" + port); err != nil {
		logger.WithError(err).Fatal("Failed to start server")
	}
} 